"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Context = void 0;
const discord_js_1 = require("discord.js");
class Context {
    data;
    args;
    bot;
    params;
    parent;
    command;
    constructor(data, bot) {
        this.data = data;
        this.bot = bot;
        this.args = this.data instanceof discord_js_1.Message ? [] : null;
        this.params = this.data instanceof discord_js_1.Message ? [] : null;
        this.parent = null;
        this.command = null;
    }
    get message() {
        return this.data instanceof discord_js_1.Message ? this.data : null;
    }
    get interaction() {
        return this.data instanceof discord_js_1.Message ? null : this.data;
    }
    get author() {
        return this.data instanceof discord_js_1.Message ? this.data.author : this.data.user;
    }
    get channel() {
        return this.data.channel;
    }
    get member() {
        return this.data.member;
    }
    get guild() {
        return this.data.guild;
    }
    async send(options) {
        if (this.data instanceof discord_js_1.Message) {
            return (await this.data.channel?.send(options).catch(e => null));
        }
        else {
            return (await this.data.reply(options).catch(e => null));
        }
    }
    async defer(options) {
        if (this.data instanceof discord_js_1.Message)
            return this.data.channel.sendTyping();
        else
            return this.data.deferReply({ ephemeral: !!options?.ephemeral });
    }
    get(param, defaultValue = null) {
        if (this.data instanceof discord_js_1.Message)
            return this.params?.find(p => p.name.toLowerCase() === param.toLowerCase())?.value || defaultValue;
        else {
            let found = this.data.options._hoistedOptions.find(s => s.name === param.toLowerCase());
            if (!found)
                return null;
            return found?.member || found?.channel || found?.role || found?.value || defaultValue;
        }
    }
}
exports.Context = Context;
