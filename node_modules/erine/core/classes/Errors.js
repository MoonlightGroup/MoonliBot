"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnlyForIDs = exports.NotInChannelType = exports.NotNSFW = exports.InvalidChannelType = exports.InvalidParamRole = exports.InvalidParamChannel = exports.InvalidParamMember = exports.NotParamBoolean = exports.MissingBotChannelPermission = exports.MissingBotPermission = exports.MissingChannelPermission = exports.MissingPermission = exports.InvalidParamChoice = exports.NotParamNumber = exports.MissingRequiredParam = exports.UnknownCommandError = exports.CommandNotFound = exports.NotOwner = exports.GuildOnly = void 0;
class GuildOnly {
    ctx;
    constructor(context) {
        this.ctx = context;
    }
    get user() {
        return this.ctx.author;
    }
}
exports.GuildOnly = GuildOnly;
class NotOwner {
    ctx;
    constructor(context) {
        this.ctx = context;
    }
    get user() {
        return this.ctx.author;
    }
}
exports.NotOwner = NotOwner;
class CommandNotFound {
    ctx;
    provided;
    constructor(context, provided) {
        this.ctx = context;
        this.provided = provided;
    }
}
exports.CommandNotFound = CommandNotFound;
class UnknownCommandError {
    ctx;
    error;
    constructor(context, error) {
        this.ctx = context;
        this.error = error;
    }
}
exports.UnknownCommandError = UnknownCommandError;
class MissingRequiredParam {
    ctx;
    param;
    constructor(context, param) {
        this.ctx = context;
        this.param = param;
    }
}
exports.MissingRequiredParam = MissingRequiredParam;
class NotParamNumber {
    ctx;
    param;
    constructor(context, param) {
        this.ctx = context;
        this.param = param;
    }
}
exports.NotParamNumber = NotParamNumber;
class NotParamBoolean {
    ctx;
    param;
    constructor(context, param) {
        this.ctx = context;
        this.param = param;
    }
}
exports.NotParamBoolean = NotParamBoolean;
class InvalidParamChoice {
    ctx;
    param;
    choices;
    constructor(context, param, choices) {
        this.ctx = context;
        this.param = param;
        this.choices = choices;
    }
}
exports.InvalidParamChoice = InvalidParamChoice;
class InvalidParamMember {
    ctx;
    param;
    constructor(context, param) {
        this.ctx = context;
        this.param = param;
    }
}
exports.InvalidParamMember = InvalidParamMember;
class InvalidParamChannel {
    ctx;
    param;
    constructor(context, param) {
        this.ctx = context;
        this.param = param;
    }
}
exports.InvalidParamChannel = InvalidParamChannel;
class InvalidParamRole {
    ctx;
    param;
    constructor(context, param) {
        this.ctx = context;
        this.param = param;
    }
}
exports.InvalidParamRole = InvalidParamRole;
class InvalidChannelType {
    ctx;
    param;
    provided;
    expected;
    constructor(context, param, provided, expected) {
        this.ctx = context;
        this.param = param;
        this.provided = provided;
        this.expected = expected;
    }
}
exports.InvalidChannelType = InvalidChannelType;
class MissingPermission {
    ctx;
    permissions;
    constructor(context, perm) {
        this.ctx = context;
        this.permissions = perm;
    }
}
exports.MissingPermission = MissingPermission;
class MissingChannelPermission {
    ctx;
    permissions;
    channel;
    constructor(context, perm, channel) {
        this.ctx = context;
        this.permissions = perm;
        this.channel = channel;
    }
}
exports.MissingChannelPermission = MissingChannelPermission;
class MissingBotPermission {
    ctx;
    permissions;
    constructor(context, perm) {
        this.ctx = context;
        this.permissions = perm;
    }
}
exports.MissingBotPermission = MissingBotPermission;
class MissingBotChannelPermission {
    ctx;
    permissions;
    channel;
    constructor(context, perm, channel) {
        this.ctx = context;
        this.permissions = perm;
        this.channel = channel;
    }
}
exports.MissingBotChannelPermission = MissingBotChannelPermission;
class NotNSFW {
    ctx;
    constructor(context) {
        this.ctx = context;
    }
}
exports.NotNSFW = NotNSFW;
class NotInChannelType {
    ctx;
    types;
    channel;
    constructor(ctx, types, channel) {
        this.ctx = ctx;
        this.types = types;
        this.channel = channel;
    }
}
exports.NotInChannelType = NotInChannelType;
class OnlyForIDs {
    ctx;
    snowflakes;
    constructor(context, snowflakes) {
        this.ctx = context;
        this.snowflakes = snowflakes;
    }
}
exports.OnlyForIDs = OnlyForIDs;
